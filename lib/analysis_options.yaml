include: all_lint_rules.yaml
analyzer:
  errors:
    # Otherwise cause the import of all_lint_rules to warn because of some rules conflicts.
    # The conflicts are fixed in this file instead, so we can safely ignore the warning.
    included_file_warning: ignore
    # 依存関係にgitリポジトリを指定しているため。Publishable packages can't have 'git' dependenciesと表示される
    invalid_dependency: ignore
    missing_required_param: error
    missing_return: error
  exclude:
    # ignore warnings in files from json_serializable, built_value and most generators
    - "**/*.g.dart"
    # ignore warnings in files generated by Freezed specifically.
    - "**/*.freezed.dart"
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true
linter:
  rules:
    # for json cast
    avoid_as: false
    # for constants, enum-like types class
    avoid_classes_with_only_static_members: false
    # use single quotes.
    prefer_double_quotes: false
    # there is no reason to write docs.
    public_member_api_docs: false
    # there is no need app level debug.
    # https://dart-lang.github.io/linter/lints/diagnostic_describe_all_properties.html
    diagnostic_describe_all_properties: false
    # sometimes, codes becomes uniform because of this rule.
    # https://dart-lang.github.io/linter/lints/lines_longer_than_80_chars.html
    lines_longer_than_80_chars: false
    # use prefer_relative_imports
    # https://dart-lang.github.io/linter/lints/always_use_package_imports.html
    prefer_relative_imports: false
    # Usually, the types can be easily inferred
    # https://dart-lang.github.io/linter/lints/omit_local_variable_types.html
    always_specify_types: false
    # use final
    # https://dart-lang.github.io/linter/lints/unnecessary_final.html
    unnecessary_final: false
    # use for flavor and build type
    # https://dart-lang.github.io/linter/lints/do_not_use_environment.html
    do_not_use_environment: false
    # It's not something we should do.
    # When we can do it in programming, make it true
    # https://dart-lang.github.io/linter/lints/sort_pub_dependencies.html
    sort_pub_dependencies: false
    # use json convert
    # https://dart-lang.github.io/linter/lints/avoid_annotating_with_dynamic.html
    avoid_annotating_with_dynamic: false
    # already have a warning
    # https://dart-lang.github.io/linter/lints/prefer_final_parameters.html
    # incompatible with: https://dart-lang.github.io/linter/lints/avoid_final_parameters.html
    prefer_final_parameters: false
    # 明示的に引数を指定したい時があるため
    # https://dart.dev/tools/linter-rules/avoid_redundant_argument_values
    avoid_redundant_argument_values: false
    # DOCコメントでTODOを書いてもワーニングが出るため。また個人開発で強くスタイルを統一する必要がないため
    # https://dart.dev/tools/linter-rules/flutter_style_todos
    flutter_style_todos: false
    # 1つのメンバーのみの抽象クラスを定義することもあるため。
    # https://dart.dev/tools/linter-rules/one_member_abstracts
    one_member_abstracts: false
    # final _name = name ?? hoge.nameのように宣言したいケースが存在するため
    # https://dart.dev/tools/linter-rules/no_leading_underscores_for_local_identifiers
    no_leading_underscores_for_local_identifiers: false
    # `unawaited`をつけることで、コードがみづらくなるため
    # https://dart.dev/tools/linter-rules/unawaited_futures
    unawaited_futures: false
    # 使い方によっては、Futureを捨てることがあるため
    # https://dart.dev/tools/linter-rules/discarded_futures
    discarded_futures: false
    # omit_obvious_local_variable_typesを優先する
    # https://dart.dev/tools/linter-rules/specify_nonobvious_local_variable_types
    specify_nonobvious_local_variable_types: false
    # specify_nonobvious_property_typesを優先する
    # https://dart.dev/tools/linter-rules/omit_obvious_property_types
    omit_obvious_property_types: false
    #prefer_for_elements_to_map_fromIterableを優先する
    # https://dart.dev/tools/linter-rules/prefer_for_elements_to_map_fromIterable
    prefer_foreach: false
    # getterが必要ないケースもあるため
    # https://dart.dev/tools/linter-rules/avoid_setters_without_getters
    avoid_setters_without_getters: false
    # 対応が大変なため & ここまでチェックする必要を感じないため
    # https://dart.dev/tools/linter-rules/unsafe_variance
    unsafe_variance: false
    # コードが簡潔でわかりやすいため
    # https://dart.dev/tools/linter-rules/always_put_control_body_on_new_line
    always_put_control_body_on_new_line: false
    # setter以外からプロパティを変更することもあるため
    # https://dart.dev/tools/diagnostics/use_setters_to_change_properties
    use_setters_to_change_properties: false
    # コードが簡潔でわかりやすいため
    # https://dart.dev/tools/diagnostics/always_put_control_body_on_new_line
    always_put_control_body_on_new_line: false
